<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>open-source on Rohit Kumar</title>
    <link>https://aquatiko.github.io/tags/open-source/</link>
    <description>Recent content in open-source on Rohit Kumar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Tue, 24 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://aquatiko.github.io/tags/open-source/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(Prequel)Second PR to JuliaAstro</title>
      <link>https://aquatiko.github.io/blog/2019-09/prequelsecond-pr-to-juliaastro/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aquatiko.github.io/blog/2019-09/prequelsecond-pr-to-juliaastro/</guid>
      <description>PR info. 9th PR on AstroImages.jl(I only submitted 2 PR before getting selected for JuliaAstro although I had other PRs in other Julia related repos). Task: A FITS file can contain both images and/or tables related to an Astronomical image. So my task was to write something to handle cases when there is no image component present in the file. It&amp;rsquo;s like adding corner cases. Things used: Nothing specific. But many iterations done due to not knowing standard things. (I was still new to Julia)
Back-story My first PR was in and I discovered this one accidentally. I got an error while using a FITS file without an image component. Although we can specify our own index but by default AstroImages treated the first index of FITS as image component. But according to me, the system should be intelligent to handle such know situations (also was finding things to make PRs for). It later turned out to be an important observation.
PR evaluation and learnings This PR started with pointing mistakes I did in the PR. I wasn&amp;rsquo;t familiar with the concept of Multiple Dispatch then and I mixed development practices of Python too. I was opening the same file several times (in Astronomy it can go to GBs too).</description>
    </item>
    
    <item>
      <title>(Prequel)First PR to JuliaAstro: Making Impression</title>
      <link>https://aquatiko.github.io/blog/2019-09/prequelfirst-pr-to-juliaastro-making-impression/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aquatiko.github.io/blog/2019-09/prequelfirst-pr-to-juliaastro-making-impression/</guid>
      <description>PR info. 7th PR on AstroImages.jl. My first PR to JuliaAstro org. Task: Add a feature to change brightness/contrast of AstroImages in real-time in Jupyter notebook itself. Things used: Interact.jl for interactive Jupyter visualization.
Back-story There was a criterion of OpenAstronomy that a student should have at least one PR to the project to be eligible for getting selected into the org. Our mentor Mose told us about this and as AstroImages.jl was a new package, there weren&amp;rsquo;t enough issues to solve. So he came up with this idea that can be implemented to the package. Lucky me, I have done the same thing before while extending docs of Images.jl. I think this gave me an edge over others. Those days I was also contributing to JuliaText, so managing time for both org. was tuff. But as I knew how to do this, it was a quick PR.
PR evaluation and learnings Mose was expecting the same thing which I had made. I also proposed some ideas like we can store this operation and change the data of FITS if the user wants according to this feature. But Mose highlighted that the data is holy, we shouldn&amp;rsquo;t just modify it just carelessly.</description>
    </item>
    
    <item>
      <title>Community Bonding Period: JuliaAstro</title>
      <link>https://aquatiko.github.io/blog/2019-05/community-bonding-period-juliaastro/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aquatiko.github.io/blog/2019-05/community-bonding-period-juliaastro/</guid>
      <description>Why this Community Bonding Period(CBP)? According to Google,
&amp;ldquo;The community bonding period is when you work out further details of your project plan, schedule regular upcoming meetings with your mentor, get your development environment set up and start to engage with the projectâ€™s open source community. This is the time to work with your mentor on setting expectations for your interactions and how your progress is measured during the GSoC program. Hopefully, you have already participated in many discussions with your mentor, clarifying the project and expectations during the application period, but now is the time to finalize your plans.&amp;rdquo;
How this period went for me? It really fulfilled everything it was supposed to. Hats off to Google for this initiative of adding an extra month in the timeline. So, In my whole project, I had most of the things figured out, like what will go in, what will go out, how will it be structured and implemented. Despite this, it follows a big BUT&amp;hellip;
But a very crucial and challenging task is to port reproject from astropy. It&amp;rsquo;s like the most important feature of the project and requires some complex work like understanding the python version and figuring out a Julian way to write it.</description>
    </item>
    
    <item>
      <title>WCS.jl Package Analysis</title>
      <link>https://aquatiko.github.io/blog/2019-05/wcs.jl-package-analysis/</link>
      <pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aquatiko.github.io/blog/2019-05/wcs.jl-package-analysis/</guid>
      <description>Why WCS.jl package After the introduction of package FITSIO.jl for handling FITS files in Julia, another package was required to manage the World Coordinate System(WCS) transformations of a FITS object. The WCS info. is present in the header of one of the HDU(s) of a FITS file. These transformations map the pixel locations in an image to their real-world units, such as their position on the sky sphere. These transformations can work both forward (from pixel to sky) and backward (from sky to pixel). This package wraps the WCSLIB C library.
Installation WCS.jl is a registered package in Julia and can be installed from package manager as: pkg&amp;gt; add WCS
or it can be build from source as: julia&amp;gt; Pkg.clone(&amp;quot;https://github.com/JuliaAstro/WCS.jl&amp;quot;)
Usage After installing the package, you can start using it with julia&amp;gt; using WCS
Creating a WCS object WCS objects are defined by a type WCSTransform which contains the following fields based on the information present in the header:
 flag::Cint naxis::Cint crpix::Ptr{Cdouble} pc::Ptr{Cdouble} cdelt::Ptr{Cdouble} crval::Ptr{Cdouble} cunit::Ptr{Cvoid} ctype::Ptr{Cvoid} lonpole::Cdouble latpole::Cdouble restfrq::Cdouble restwav::Cdouble npv::Cint npvmax::Cint pv::Ptr{PVCard} nps::Cint npsmax::Cint ps::Ptr{PSCard} cd::Ptr{Cdouble} crota::Ptr{Cdouble} altlin::Cint velref::Cint alt::NTuple{4, UInt8} colnum::Cint colax::Ptr{Cint} cname::Ptr{Cvoid} crder::Ptr{Cdouble} csyer::Ptr{Cdouble} czphs::Ptr{Cdouble} cperi::Ptr{Cdouble} wcsname::NTuple{72, UInt8} timesys::NTuple{72, UInt8} trefpos::NTuple{72, UInt8} trefdir::NTuple{72, UInt8} plephem::NTuple{72, UInt8} timeunit::NTuple{72, UInt8} dateref::NTuple{72, UInt8} mjdref::NTuple{2, Cdouble} timeoffs::Cdouble dateobs::NTuple{72, UInt8} datebeg::NTuple{72, UInt8} dateavg::NTuple{72, UInt8} dateend::NTuple{72, UInt8} mjdobs::Cdouble mjdbeg::Cdouble mjdavg::Cdouble mjdend::Cdouble jepoch::Cdouble bepoch::Cdouble tstart::Cdouble tstop::Cdouble xposure::Cdouble telapse::Cdouble timsyer::Cdouble timrder::Cdouble timedel::Cdouble timepixr::Cdouble obsgeo::NTuple{6, Cdouble} obsorbit::NTuple{72, UInt8} radesys::NTuple{72, UInt8} equinox::Cdouble specsys::NTuple{72, UInt8} ssysobs::NTuple{72, UInt8} velosys::Cdouble zsource::Cdouble ssyssrc::NTuple{72, UInt8} velangl::Cdouble ntab::Cint nwtb::Cint tab::Ptr{Cvoid} # Ptr{tabprm} wtb::Ptr{Cvoid} # Ptr{wtbarr} lngtyp::NTuple{8, UInt8} lattyp::NTuple{8, UInt8} lng::Cint lat::Cint spec::Cint cubeface::Cint types::Ptr{Cint} lin::linprm cel::celprm spc::spcprm err::Ptr{WCSErr} m_flag::Cint m_naxis::Cint m_crpix::Ptr{Cdouble} m_pc::Ptr{Cdouble} m_cdelt::Ptr{Cdouble} m_crval::Ptr{Cdouble} m_cunit::Ptr{Cvoid} m_ctype::Ptr{Cvoid} m_pv::Ptr{PVCard} m_ps::Ptr{PSCard} m_cd::Ptr{Cdouble} m_crota::Ptr{Cdouble} m_colax::Ptr{Cint} m_cname::Ptr{Cvoid} m_crder::Ptr{Cdouble} m_csyer::Ptr{Cdouble} m_czphs::Ptr{Cdouble} m_cperi::Ptr{Cdouble} m_tab::Ptr{Cvoid} # Ptr{tabprm} m_wtb::Ptr{Cvoid} # Ptr{wtbarr}  Creating from scratch To create a WCSTransform from scratch, we can use the constructor like:</description>
    </item>
    
    <item>
      <title>What Coala Organization taught me: Reaching beyond the beginners threshold</title>
      <link>https://aquatiko.github.io/blog/2019-05/what-coala-organization-taught-me-reaching-beyond-the-beginners-threshold/</link>
      <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aquatiko.github.io/blog/2019-05/what-coala-organization-taught-me-reaching-beyond-the-beginners-threshold/</guid>
      <description>So, you have finally convinced yourself to enter the realm of Open Source Development. But wait, the initial threshold of getting to speed in this domain is feeling too difficult for you. You are struggling to do your very first contribution in a big Open-Source repository. The huge code-base is too overwhelming and difficult to understand. The issues marked as simple are also too difficult to comprehend. There are just too many things you still don&amp;rsquo;t know. The list of things you are seeing for the first time is growing day by day. It seems it&amp;rsquo;s a bad choice after all?
So my dear open-sorcerer, have some hope. This feeling is mutual with at-least 60% of the people out there. It always starts with a bumpy road but if you can cross that part, believe me, the road ahead is smoother than you can imagine.
I started with OSS on 15th Sept with zero knowledge of this domain, I just knew some of the features of GitHub GUI. My first PR was to NLTK on 22nd Sept and for that whole week, I was struggling to just get my first PR in. The issue tracker and the vast code-base to work on was not intuitive enough to get past that threshold.</description>
    </item>
    
    <item>
      <title>Why I started Open-Source</title>
      <link>https://aquatiko.github.io/blog/2019-04/why-i-started-open-source/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aquatiko.github.io/blog/2019-04/why-i-started-open-source/</guid>
      <description>After more than 6 months into this, this question almost seems silly to me&amp;hellip; I remember the first week of September 2018, I was desperate to find just a single good enough reason for convincing me to contribute to the Open-Source community. I wanted to participate in GSoC but the idea of spending my own personal time into someone else project was not convincing me. Even after this, something changed and convinced me to do so. I hope by the end of it, you too will be convinced or at least give it a thought!!
Back in those days, I was exploring the depths of Deep Learning. My interest was divided among the most exciting domains popular those days. But somehow NLP was the top one. It was fascinating and enough to keep me there. The same year, two of my seniors became the first batch to crack GSoC from my college. I can say, it totally sparked hope in others.
I remember the day 15th September, I decided I too want it and started preparing for it. I know it was way too early to aim for it, but at that time I was familiar only with some markdown syntax and basic GitHub interface.</description>
    </item>
    
  </channel>
</rss>